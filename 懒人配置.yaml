# ====================== 💻 DNS 设置 (DNS) ======================
dns:
  enable: true
  cache-algorithm: arc
  prefer-h3: false
  use-hosts: true
  use-system-hosts: true
  # respect-rules: false - 是否强制执行规则中的域名解析 (true: 是, false: 否)
  # false: DNS解析不强制遵循规则，主要依赖enhanced-mode(fake-ip)和fallback-filter/nameserver-policy
  # true: DNS解析会尝试遵循规则，如果匹配到代理规则，可能会使用代理的DNS进行解析 (取决于客户端实现)
  # 当前配置为false，配合fake-ip是常见模式，通常无需修改。
  respect-rules: false # 保持原样，配合 fake-ip
  listen: 0.0.0.0:1053 # DNS 监听地址和端口
  ipv6: false          # 是否启用 IPv6 DNS (取决于你的网络环境和需求，如果不需要IPV6代理，可以保持false)
  default-nameserver: # 默认的 DNS 服务器，用于 fallback-filter 中未匹配的请求 (通常用国内公共DNS)
    - 223.5.5.5
    - 223.6.6.6
  enhanced-mode: fake-ip # DNS 增强模式 (redir-host, fake-ip)。fake-ip 常用于 TUN 模式。
  fake-ip-range: 198.18.0.1/16 # fake-ip 范围 (标准范围)
  fake-ip-filter-mode: blacklist # fake-ip 过滤模式 (blacklist: 黑名单, whitelist: 白名单)
  fake-ip-filter:    # fake-ip 过滤列表 (列出的域名不进行 fake-ip 解析，将直接解析真实IP)
    - '*.lan'
    # 可以根据需要添加其他不需要fake-ip的域名，例如：
    # - 'time.windows.com' # 系统时间同步
    # - 'connectivitycheck.gstatic.com' # 健康检查URL，如果fake-ip导致检查失败

  nameserver-policy: # 特定规则集或域名的 DNS 服务器策略 (优先级高于 nameserver)
    '+.arpa': '10.0.0.1' # arpa 域名使用本地 DNS (通常是路由器或系统DNS)
    # 'rule-set:chinamax' 指向DIRECT，解析时应使用国内DNS
    # 将其指向 direct-nameserver 中定义的国内DNS，与下方 rules 中的 DIRECT 策略保持一致
    'rule-set:chinamax':
      - 223.5.5.5 # 指向 direct-nameserver 中相同的国内DNS
      - 223.6.6.6 # 指向 direct-nameserver 中相同的国内DNS
    # 示例：特定域名使用特定DNS
    # '+.apple.com': https://dns.alidns.com/dns-query # 示例：苹果域名使用阿里云DoH

  nameserver: # 主要的 DNS 服务器列表 (通常用于境外或非强制国内解析的域名，或 fallback-filter 未匹配的域名)
    - https://doh.pub/dns-query # 腾讯 DoH
    - https://cloudflare-dns.com/dns-query # Cloudflare DoH
    - https://dns.alidns.com/dns-query # 阿里 DoH
    - https://dns.quad9.net/dns-query # Quad9 DoH (支持ECS)
  
  fallback: # 当 nameserver 中的 DNS 解析失败、被污染，或 fallback-filter 匹配时使用的备用 DNS
    # (通常用于境内或不易被污染的DNS，配合geoip和geosite使用效果更佳)
    - tls://dns.quad9.net # 境外加密 DNS 作为备用 (TLS 端口 853)
    - https://cloudflare-dns.com/dns-query # 境外 DoH DNS 作为备用
    # 可以考虑添加国内运营商或公共DNS，但在某些环境下可能仍受污染
    # - 114.114.114.114

  proxy-server-nameserver: # 通过代理服务器解析的 DNS 服务器
    # (通常是境外 DNS，用于客户端自身连接远程DoH/DoT服务器时使用，而不是给其他应用解析)
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query # 这里也可以放一些你信任的国内 DoH (客户端自身通过代理连接这些DNS)

  direct-nameserver: # DIRECT 策略使用的 DNS 服务器 (强制走直连的流量使用这里的DNS解析)
    - 223.5.5.5 # 阿里云公共DNS
    - 223.6.6.6 # 阿里云公共DNS
    # 也可以使用运营商的DNS，例如 114.114.114.114, 119.29.29.29等
  direct-nameserver-follow-policy: false # DIRECT 策略的 DNS 是否遵循 nameserver-policy (通常保持 false，确保DIRECT使用direct-nameserver)

  fallback-filter: # 触发 fallback DNS 的过滤规则 (如果匹配这些条件，DNS 查询将使用 fallback 中的DNS进行解析)
    geoip: true      # 是否根据 GEOIP 触发 fallback (通常设置为 true，国内IP触发fallback)
    geoip-code: CN   # GEOIP 国家代码 (通常设置为 CN)
    geosite:         # 根据 GeoSite 规则集触发 fallback
      - gfw          # gfw 列表内的域名使用 fallback
    ipcidr:          # 根据 IP 段触发 fallback
      - 240.0.0.0/4  # 标准的测试网/保留 IP 段，通常用于过滤 fake-ip 的查询，强制 fallback 解析真实IP
    domain:          # 根据域名列表触发 fallback
      - '+.google.com'
      - '+.facebook.com'
      # 修正：删除不规范的域名条目 '+.youtube.com'
    # 示例：添加其他需要强制 fallback 解析的域名
    # - '+.twitter.com'

  cache:             # DNS 缓存设置
    enable: true
    ttl: 600           # 缓存时间，单位秒

# ====================== 🌍 TUN 设置 (TUN) ======================
tun:
  enable: true       # 是否启用 TUN 模式
  stack: gvisor      # TUN 模式的协议栈 (auto, gvisor, system)。gvisor 通常兼容性更好。
  dns-hijack:        # DNS 劫持设置，将系统DNS请求劫持到Clash监听的DNS端口
    - "any:53"       # 劫持所有端口为 53 的 UDP 请求
    - "tcp://any:53" # 劫持所有端口为 53 的 TCP 请求
  auto-route: true   # 是否自动添加路由规则，将流量导向TUN接口
  auto-detect-interface: true # 是否自动检测出口网卡 (适用于多网卡环境)
  exclude-process: # 排除列表中的进程名，这些进程的流量不走 TUN (通常是安全软件或系统进程)
    - "TM.exe"       # 腾讯电脑管家主程序 (示例)
    - "AK.exe"       # 某个未知进程名 (请根据你的实际需要修改或删除)
    # 可以添加其他需要排除的进程，例如：
    # - "clash.exe" # 如果是Clash本身，避免回环

# ====================== ✨ 代理提供者通用设置 (Proxy Provider Common Settings) ======================
p: &p # 定义一个锚点 p，用于重复设置
  type: http       # 代理提供者类型 (http, file)
  # 自动更新订阅时间，单位为秒
  interval: 14400     # 14400 秒 = 4 小时，每 4 小时更新一次订阅 (原注释写的是每小时，已更正)
  health-check:    # 健康检查设置
    enable: true     # 启用健康检查
    url: http://connectivitycheck.gstatic.com/generate_204 # 检查 URL (标准连通性检查地址)
    # 节点连通性检测时间，单位为秒
    interval: 800    # 800 秒 ≈ 13.3 分钟，每 13.3 分钟检查一次节点连通性 (原注释写的是10分钟)
    # 节点超时延迟，单位为毫秒
    timeout: 3000    # 3 秒超时 (原注释写的是2秒)
    # 节点自动切换差值，单位为毫秒 (url-test类型组生效)
    tolerance: 600   # 如果最佳节点的延迟高于次佳节点 + tolerance，Clash可能会切换到次佳节点。

# ====================== 📑 代理提供者 (Proxy Providers) ======================
# 定义代理节点来源，可以是订阅链接或本地文件
proxy-providers:
  CM喂饭干货满满:
    <<: *p
    # path: ./CM喂饭干货满满.yaml
    url: "https://SOS.CMLiussss.net/auto"
    # 如需要为该订阅组节点添加前缀，取消下面两行注释
    # override:
      # additional-prefix: "[CM喂饭干货满满]"

  # 本地配置: # 本地文件提供者示例，如果不需要请删除或注释掉整个块
  #   <<: *p
  #   type: file # 本地文件提供者类型应为 file
  #   path: ./proxy_provider/本地配置.yaml # 指向本地 YAML 文件
  #   # interval 通常用于远程URL，本地文件不需要频繁检查更新，可以删除或设置较大值
  #   interval: 86400 # 例如每天检查一次文件修改
  #   # health-check 设置与远程提供者相同
  #   health-check:
  #     enable: true
  #     url: http://connectivitycheck.gstatic.com/generate_204
  #     interval: 600
  #     timeout: 3000
  #     tolerance: 100
  #   # 如需要为该订阅组节点添加前缀，取消下面两行注释
  #     # additional-prefix: "[本地配置]"

# ====================== 🎯 代理组 (Proxy Groups) ======================
proxy-groups:
  - name: ✈️ 节点选择
    type: select # 类型为 select (选择)，用户在这个组里挑选最终使用的节点或地区组
    proxies:
      - 🇭🇰 香港节点 # <-- 可以选择香港节点组中的节点
      - 🇺🇲 美国节点 # <-- 可以选择美国节点组中的节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🚀 我的节点 # <-- 包含所有过滤后节点的组
      - 😍负载均衡 # <-- 包含所有不含排除关键词的节点，并进行负载均衡
      - DIRECT # <-- 直连策略

  - name: 🍿 国外媒体
    type: select # 类型为 select (选择)
    proxies:
      - ✈️ 节点选择 # <-- 可以选择从主要的节点选择组中挑选
      - 🇭🇰 香港节点
      - 🇺🇲 美国节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🚀 我的节点
      - 😍负载均衡
      - DIRECT

  - name: 📟 智能助理
    type: select # 类型为 select (选择)
    proxies:
      - 🇺🇲 美国节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🚀 我的节点
      - DIRECT

  - name: Ⓜ️ 微软服务
    type: select # 类型为 select (选择)
    proxies:
      - ✈️ 节点选择 # <-- 可以选择从主要的节点选择组中挑选
      - 🇭🇰 香港节点
      - 🇺🇲 美国节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🚀 我的节点
      - 😍负载均衡
      - DIRECT

  - name: 🍎 苹果服务
    type: select # 类型为 select (选择)
    proxies:
      - ✈️ 节点选择 # <-- 可以选择从主要的节点选择组中挑选
      - 🇭🇰 香港节点
      - 🇺🇲 美国节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🚀 我的节点
      - DIRECT

  - name: 🎮 游戏平台
    type: select # 类型为 select (选择)
    proxies:
      - ✈️ 节点选择 # <-- 可以选择从主要的节点选择组中挑选
      - 🇭🇰 香港节点
      - 🇺🇲 美国节点
      - 🇯🇵 日本节点
      - 🇰🇷 韩国节点
      - 🇨🇳 台湾节点
      - 🇸🇬 新加坡节点
      - 🚀 我的节点
      - DIRECT

  - name: 🚀 我的节点 # 这个组通常用于包含所有来自订阅或其他提供者的节点
    include-all: true # 包含所有代理提供者中的节点
    type: select # 类型为 select (选择)，允许用户手动选择其中一个节点
    # 注意：这里不需要 filter，因为 filter 应该在引用这些节点的组中进行，或者在 proxy-providers 中进行过滤

  # 定义各个国家/地区的节点组，并应用过滤器
  - name: 🇭🇰 香港节点
    type: url-test # 类型为 url-test，自动选择延迟最低的节点
    include-all: true # 包含所有代理提供者中的节点
    filter: ^(?!.*(?:邮箱|流量|订阅|频道|剩余|到期|套餐|官网|加入))(?i).*?(?:港|HK|hk|Hong Kong|HongKong|hongkong).* # 修正后的过滤器
    interval: 300
    tolerance: 50

  - name: 🇯🇵 日本节点
    type: url-test
    include-all: true
    filter: ^(?!.*(?:邮箱|流量|订阅|频道|剩余|到期|套餐|官网|加入))(?i).*?(?:日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan).* # 修正后的过滤器
    interval: 300
    tolerance: 50

  - name: 🇺🇲 美国节点
    type: url-test
    include-all: true
    filter: ^(?!.*(?:邮箱|流量|订阅|频道|剩余|到期|套餐|官网|加入))(?i).*?(?:美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States).* # 修正后的过滤器
    interval: 300
    tolerance: 50

  - name: 🇨🇳 台湾节点
    type: url-test
    include-all: true
    filter: ^(?!.*(?:邮箱|流量|订阅|频道|剩余|到期|套餐|官网|加入))(?i).*?(?:台|新北|彰化|TW|Taiwan).* # 修正后的过滤器
    interval: 300
    tolerance: 50

  - name: 🇸🇬 新加坡节点
    type: url-test
    include-all: true
    filter: ^(?!.*(?:邮箱|流量|订阅|频道|剩余|到期|套餐|官网|加入))(?i).*?(?:新加坡|坡|狮城|SG|Singapore).* # 修正后的过滤器
    interval: 300
    tolerance: 50

  - name: 🇰🇷 韩国节点
    type: url-test
    include-all: true
    filter: ^(?!.*(?:邮箱|流量|订阅|频道|剩余|到期|套餐|官网|加入))(?i).*?(?:KR|Korea|KOR|首尔|韩|韓).* # 修正后的过滤器
    interval: 300
    tolerance: 50

  - name: 😍负载均衡 # 这个组包含所有不含排除关键词的节点，并进行负载均衡
    include-all: true # 包含所有代理提供者中的节点
    type: load-balance # 类型为 load-balance，自动在组内节点间分配流量
    filter: ^(?!.*(?:邮箱|流量|订阅|频道|剩余|到期|套餐|官网|加入))(?i).* # 修正后的过滤器，排除包含关键词的所有节点

# ====================== 📦 规则提供者 (Rule Providers) ======================
rule-providers:
  openai:
    type: http
    behavior: classical # 假设规则文件是域名或 IP 列表
    format: text
    url: "https://raw.githubusercontent.com/EAlyce/conf/refs/heads/main/Rule/OpenAI.list"
    interval: 86400 # 每天更新一次
    # path: ./rules/openai.yaml # 如果需要本地文件，取消注释并修改路径

  steam:
    type: http
    behavior: classical
    format: text
    url: "https://raw.githubusercontent.com/LM-Firefly/Rules/refs/heads/master/Game.list"
    interval: 86400

  chinamedia:
    type: http
    behavior: classical
    format: text
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/ChinaMedia/ChinaMedia.list"
    interval: 86400

  globalmedia:
    type: http
    behavior: classical
    format: text
    url: "https://raw.githubusercontent.com/LM-Firefly/Rules/refs/heads/master/GlobalMedia.list"
    interval: 86400

  chinamax:
    type: http
    behavior: classical
    format: text
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/ChinaMax/ChinaMax.list"
    interval: 86400

  AppleNews:
    type: http
    behavior: classical
    format: text
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/AppleNews/AppleNews.list"
    interval: 86400

# ====================== 📜 规则 (Rules) ======================
# 流量匹配规则，从上到下依次匹配。
# 格式： - RULE_TYPE, value, policy, [options]
# 引用 rule-providers 中的规则集： - RULE-SET,<provider-name>,<policy>,[options]
rules:
  # > 广告拦截 (原配置注释掉了，如果需要请取消注释)
  # - RULE-SET,reject_domainset,REJECT
  # - RULE-SET,reject_non_ip,REJECT,NO-RESOLVE # 远程规则集通常需要 NO-RESOLVE 选项来避免 DNS 污染影响匹配
  # 绕过局域网地址
  - IP-CIDR,10.0.0.0/8,DIRECT
  - IP-CIDR,172.16.0.0/12,DIRECT
  - IP-CIDR,192.168.0.0/16,DIRECT
  - IP-CIDR,100.64.0.0/10,DIRECT
  - IP-CIDR,127.0.0.0/8,DIRECT
  # 排除进程不走代理
  - PROCESS-NAME,TM.exe,DIRECT
  - PROCESS-NAME,AK.exe,DIRECT # 请确认这个进程名是否正确

  # > 智能助理
  - RULE-SET,openai,📟 智能助理,NO-RESOLVE

  # > 苹果服务
  - DOMAIN,gateway.icloud.com,🇺🇲 美国节点
  - RULE-SET,AppleNews,🇺🇲 美国节点,NO-RESOLVE # AppleNews 单独走美国节点
  - GEOSITE,apple,🍎 苹果服务,NO-RESOLVE # 其他 Apple 服务走苹果服务组

  # > GitHub
  - GEOSITE,github,✈️ 节点选择,NO-RESOLVE # Github 走节点选择组

  # > 微软服务
  - GEOSITE,microsoft,Ⓜ️ 微软服务,NO-RESOLVE # 微软服务走微软服务组

  # > 社交平台 (Telegram)
  - GEOIP,telegram,😍负载均衡,NO-RESOLVE # Telegram 走电报信息组

  # > 游戏平台
  - RULE-SET,steam,🎮 游戏平台,NO-RESOLVE

  # > 流媒体服务
  - RULE-SET,chinamedia,DIRECT,NO-RESOLVE # 大陆媒体强制直连
  - RULE-SET,globalmedia,🍿 国外媒体,NO-RESOLVE # 其他国外媒体走国外媒体组
  # > China (国内地址强制直连)
  - RULE-SET,chinamax,DIRECT,NO-RESOLVE # chinamax 规则集强制直连
  - GEOIP,CN,DIRECT # 国内 IP 地址强制直连

  # 最终匹配规则 (FALLBACK)
  - MATCH,✈️ 节点选择 # 所有未匹配以上规则的流量，走 ✈️ 节点选择 组